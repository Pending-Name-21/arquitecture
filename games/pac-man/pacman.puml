@startuml
package "Process Input Handler" {
!includesub ../../uml/frontend-software-system/process-input-handler.puml!INTERFACE
}
package "Render Handler" {
!includesub ../../uml/frontend-software-system/render-handler.puml!INTERFACE
}
!include ../../uml/frontend-software-system/game-settings.puml
package "Update Handler" {
!includesub ../../uml/frontend-software-system/update-handler.puml!INTERFACE
}

package Pac-Man {
!include collisions.puml
!include maze.puml
!include characters.puml

  class GameController {
   -maze : Maze
   -pacman : Pacman
   -ghosts : List<AGhost>
   -score : int
   + checkCollisions() : void
   + handleInput() : void
   + updateScore() : void
   + restart(): void
  }
  GameController ..> SoundFactory
  GameController ..> SpriteFactory
  GameController ..> ProcessInputPublisher: uses
  GameController ..|> IProcessInputSubscriber : implements
  GameController --> Pacman
  GameController --> AGhost
  GameController --> Maze
  GameController --|> AGameSettings : extends

  class PowerSphere {
   - sprite : Sprite
   - time : int
   + activatePower() : void
  }
  PowerSphere ..|> ISphere
  PowerSphere ..|> ACollisionHandler
  PowerSphere --|> Block

  class Sphere {
   - sprite : Sprite
  }
  Sphere ..|> ISphere
  Sphere --|> Block
  Sphere ..|> ACollisionHandler

  interface ISphere {
   + position: Position { get; set; }
   + collect() : void
  }
  ISphere --> Position : have

}
@enduml
