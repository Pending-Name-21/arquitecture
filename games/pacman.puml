@startuml
package "Process Input Handler" {
!includesub ../uml/frontend-software-system/process-input-handler.puml!INTERFACE
}
package "Render Handler" {
!includesub ../uml/frontend-software-system/render-handler.puml!INTERFACE
}
!include ../uml/frontend-software-system/game-settings.puml
package "Update Handler" {
!includesub ../uml/frontend-software-system/update-handler.puml!INTERFACE
}


package Pac-Man {

class Position {
 - x : int
 - y : int
}

class Wall {
 - sprite : Sprite
 - position: Position
}

class PowerSphere
{
 - sprite : Sprite
 - time : int
 - position: Position
 + collect() : int
 + activatePower() : void
}

class Sphere
{
 - sprite : Sprite
 - position: Position
 + collect() : int
}

abstract class Ghost
{
 - sprite : Sprite
 -state : string
 -color : string
 + fleePacman () : void
 + chasePacman () : void
}

class ClydeGhost{}
class PinkyGhost{}
class InkyGhost{}
class BlinkyGhost{}

interface ICharacter
{
 - position: Position
 - direction : Direction
 + respawn (Position position) : void
 + move (Position) : bool
}
class Pacman 
{
 - sprite : Sprite
 - lives : int
 + hit() : bool
}

class Maze
{
 - blocks : Block[][]
 - numberSpheres : int 
 - numberPowerSpheres : int 
 + generateMaze() : void
}

class GameController
{
 -maze : Maze
 - pacman : Pacman
 -ghosts : List<Ghost>
 -score : int
 + checkCollisions() : void
 + handleInput() : void
 + updateScore() : void
 + respawnCharacters() : void
 + activatePowerUp() : void
 + restart(): void
}




GameController ..> SoundFactory
GameController ..> SpriteFactory

interface ISphere
{
 - postion : Position
 + collect() : void
}


abstract class CollisionHandler {
    + handleCollision() : void
    + update() : void
}

CollisionHandler <|-- PacmanGhostCollisionHandler
CollisionHandler <|-- PacmanWallCollisionHandler
CollisionHandler <|-- PacmanSphereCollisionHandler
CollisionHandler <|-- PacmanPowerSphereCollisionHandler
CollisionHandler <|-- GhostWallCollisionHandler

CollisionHandler ..> UpdatePublisher



class Direction {
 - dx : int
 - dy : int
 + Direction(dx : int, dy : int)
 + up() : Direction
 + down() : Direction
 + left() : Direction
 + right() : Direction
}


interface IMovable {
 + move(direction : Direction) : bool
}


class Block{
 - position : Position
}

GameController ..> ProcessInputPublisher: uses
GameController ..|> IProcessInputSubscriber : implements
GameController --> Pacman
GameController --> Ghost
GameController --> Maze


ClydeGhost --|> Ghost
PinkyGhost --|> Ghost
InkyGhost --|> Ghost
BlinkyGhost --|> Ghost


Pacman ..|> ICharacter
Ghost ..|> ICharacter

Maze --> Block

GameController --|> AGameSettings : extends

PowerSphere ..|> ISphere
Sphere ..|> ISphere

ISphere --> Position : have
ICharacter --> Position : have
Wall --> Position : have



Pacman ..|> IMovable
Ghost ..|> IMovable

IMovable --- Direction

ICharacter --> Direction


Wall --|> Block
Pacman --|> Block
Ghost --|> Block
PowerSphere --|> Block
Sphere --|> Block

Ghost ..|> CollisionHandler
Wall ..|> CollisionHandler
Sphere ..|> CollisionHandler
PowerSphere ..|> CollisionHandler

}
@enduml
