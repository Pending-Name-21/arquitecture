@startuml
package "Process Input Handler" {
!includesub ../uml/frontend-software-system/process-input-handler.puml!INTERFACE
}
package "Render Handler" {
!includesub ../uml/frontend-software-system/render-handler.puml!INTERFACE
}
!include ../uml/frontend-software-system/game-settings.puml


package Pac-Man {

class Position {
 - x : int
 - y : int
}

class Wall {
 - sprite : Sprite
 - position: Position
}

class PowerSphere
{
 - sprite : Sprite
 - time : int
 - position: Position
 + collect() : int
 + activatePower() : void
}

class Sphere
{
 - sprite : Sprite
 - position: Position
 + collect() : int
}

class Ghost
{
 - sprite : Sprite
 -state : string
 -color : string
 + fleePacman () : void
 + chasePacman () : void
}

interface ClydeGhost{}
interface PinkyGhost{}
interface InkyGhost{}
interface BlinkyGhost{}

interface ICharacter
{
 - position: Position
 + respawn (Position position) : void
 + move (Position) : bool
}
class Pacman 
{
 - sprite : Sprite
 - lives : int
 - direction : string
 + changeDirection(string direction) : void
 + looseLife() : bool
}

class Maze
{
 - walls : List<Wall>
 - spheres: List<Sphere>
 - powerSphere : List<PowerSpheres>
 - numberSpheres : int 
 - numberPowerSpheres : int 
 + generateMaze() : void
}

class GameController
{
 -maze : Maze
 - pacman : Pacman
 -ghosts : List<Ghost>
 -score : int
 + start() : void
 + restart () :void
 + pause () : void
 + end () : void
}
GameController ..> SoundFactory
GameController ..> SpriteFactory

interface ISphere
{
 - postion : Position
 + collect() : void
}


interface CollisionHandler {
    + accept(Collision collision, CollisionHandler other) : void
}

class Collision {
    + detectCollision(entity1 : CollisionHandler, entity2 : CollisionHandler) : void
    + handleCollision(Pacman pacman, Ghost ghost) : void
    + handleCollision(Pacman pacman, Wall wall) : void
    + handleCollision(Pacman pacman, Sphere sphere) : void
    + handleCollision(Pacman pacman, PowerSphere powerSphere) : void
    + handleCollision(Ghost ghost, Wall wall) : void
    + handleCollision(Ghost ghost, Pacman pacman) : void
}

GameController ..> ProcessInputPublisher: uses
GameController ..|> IProcessInputSubscriber : implements
GameController --> Pacman
GameController --> Ghost
GameController --> Maze


Ghost ..|> ClydeGhost
Ghost ..|> PinkyGhost
Ghost ..|> InkyGhost
Ghost ..|> BlinkyGhost


Pacman ..|> ICharacter
Ghost ..|> ICharacter

Maze --> Wall
Maze --> Sphere
Maze --> PowerSphere

GameController --|> AGameSettings : extends

PowerSphere ..|> ISphere
Sphere ..|> ISphere

ISphere --> Position : have
ICharacter --> Position : have
Wall --> Position : have


Pacman ..|> CollisionHandler
Ghost ..|> CollisionHandler
Wall ..|> CollisionHandler
Sphere ..|> CollisionHandler
PowerSphere ..|> CollisionHandler

Collision --> CollisionHandler : manages


}
@enduml
