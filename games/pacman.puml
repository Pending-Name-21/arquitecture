@startuml
abstract class Game {
    + isExitCondition() : boolean
}

class Coord {
    - x : int
    - y : int
}

class Size {
    - height : double
    - width : double
}

interface IFile {
    + getPath() : String
}

class Sprite {
    - position : Coord
    - size : Size
}
abstract class Sound {
    {abstract} + canPlay() : boolean
}

IFile --|> Sound
Sprite --> Coord
Sprite --> Size
Sprite ..|> IFile






interface Subscriber {
    + notify() : void
}

class EventType {
    - name : String
}

abstract class Handler {
    - subscribers : Map<EventType, List<Subscriber>>
    + subscribe(event : EventType, subscriber : Subscriber) : void
}

Handler ..> EventType
Handler ..> Subscriber
Handler <|-- MouseSubscriber
Handler <|-- KeyboardSubscriber


class Position
{
 - x : int
 - y : int
}
class Wall{
 - position: Position
}
class PowerSphere
{
 - time : int
 - position: Position
 + collect() : int
 + activatePower() : void

}

class Sphere
{
 - position: Position
 + collect() : int
}

class Ghost
{
 -state : string
 -color : string
 + fleePacman () : void
 + chasePacman () : void
}

interface ClydeGhost{}
interface PinkyGhost{}
interface InkyGhost{}
interface BlinkyGhost{}

interface ICharacter
{
 - position: Position
 + respawn (Position position) : void
 + move (Position) : bool
}
class Pacman 
{
 - lives : int
 - direction : string
 + changeDirection(string direction) : void
 + looseLife() : bool
}

class Maze
{
 - walls : List<Wall>
 - spheres: List<Sphere>
 - powerSphere : List<PowerSpheres>
 - numberSpheres : int 
 - numberPowerSpheres : int 
 + generateMaze() : void
}

class GameController
{
 -maze : Maze
 - pacman : Pacman
 -ghosts : List<Ghost>
 -score : int
 + start() : void
 + restart () :void
 + pause () : void
 + end () : void
}

interface ISphere
{
 - postion : Position
 + collect() : void
}


interface CollisionHandler {
    + accept(Collision collision, CollisionHandler other) : void
}

class Collision {
    + detectCollision(entity1 : CollisionHandler, entity2 : CollisionHandler) : void
    + handleCollision(Pacman pacman, Ghost ghost) : void
    + handleCollision(Pacman pacman, Wall wall) : void
    + handleCollision(Pacman pacman, Sphere sphere) : void
    + handleCollision(Pacman pacman, PowerSphere powerSphere) : void
    + handleCollision(Ghost ghost, Wall wall) : void
    + handleCollision(Ghost ghost, Pacman pacman) : void
}

GameController ..> KeyboardSubscriber   : uses
GameController ..|> Subscriber : implements
GameController --> Pacman
GameController --> Ghost
GameController --> Maze


Ghost ..|> ClydeGhost
Ghost ..|> PinkyGhost
Ghost ..|> InkyGhost
Ghost ..|> BlinkyGhost


Pacman ..|> ICharacter
Ghost ..|> ICharacter

Maze --> Wall
Maze --> Sphere
Maze --> PowerSphere

GameController --|> Game : extends


Ghost --|> Sprite : extends
Pacman --|> Sprite : extends
PowerSphere --|> Sprite : extends
Sphere --|> Sprite : extends
Wall --|> Sprite : extends

PowerSphere ..|> ISphere
Sphere ..|> ISphere

ISphere --> Position : have
ICharacter --> Position : have
Wall --> Position : have


Pacman ..|> CollisionHandler
Ghost ..|> CollisionHandler
Wall ..|> CollisionHandler
Sphere ..|> CollisionHandler
PowerSphere ..|> CollisionHandler

Collision --> CollisionHandler : manages



@enduml