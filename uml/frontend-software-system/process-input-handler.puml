@startuml
package "Process Input Handler" {
!startsub INTERFACE
    interface IKeyboardInputSubscriber {
        +doNotify(event: KeyboardEvent) : void
    }

    interface IMouseInputSubscriber {
        +doNotify(event: MouseEvent) : void
    }
!endsub

    interface IPublisher {
        +publish(): void
    }
    IPublisher <|.. MouseInputPublisher
    IPublisher <|.. KeyboardInputPublisher

    class MouseInputPublisher  {
        -concurrentMouseEvents: Mouse[]
        -subscribers: IMouseInputSubscriber[]
        +subscribe(subscriber: IMouseInputSubscriber): void
    }
    MouseInputPublisher "1" *-- "many" Mouse
    MouseInputPublisher "1" *-- "many" IMouseInputSubscriber
    MouseInputPublisher ..|> IEventBuffer

    class KeyboardInputPublisher {
        -concurentKeyboardEvents: Keyboard[]
        -subscribers: IKeyboardInputSubscriber[]
        +subscribe(subscriber: IKeyboardInputSubscriber): void
    }
    KeyboardInputPublisher "1" *-- "many" Keyboard
    KeyboardInputPublisher "1" *-- "many" IKeyboardInputSubscriber
    KeyboardInputPublisher ..|> IEventBuffer

  class InputVerifier {
    -processInputPublisher : ProcessInputPublisher
    -publishers: IPublisher[]
    +check() : void
  }
  InputVerifier ..> IPublisher: <<uses>>
}
@enduml

