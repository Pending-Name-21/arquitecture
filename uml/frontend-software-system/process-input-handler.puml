@startuml
package "Process Input Handler" {
!startsub INTERFACE
    interface IKeyboardInputSubscriber {
        +doNotify(event: KeyboardEvent) : void
    }

    interface IMouseInputSubscriber {
        +doNotify(event: MouseEvent) : void
    }
!endsub

    interface IPublisher {
        +publish(): void
    }
    IPublisher <|.. MouseInputPublisher
    IPublisher <|.. KeyboardInputPublisher

    class MouseInputPublisher  {
        -buffer: Buffer
        -subscribers: IMouseInputSubscriber[]
        +subscribe(subscriber: IMouseInputSubscriber): void
    }
    MouseInputPublisher "1" *-- "many" Mouse
    MouseInputPublisher "1" *-- "many" IMouseInputSubscriber
    MouseInputPublisher ..> Buffer: <<uses>>

    class KeyboardInputPublisher {
        -buffer: Buffer
        -subscribers: IKeyboardInputSubscriber[]
        +subscribe(subscriber: IKeyboardInputSubscriber): void
    }
    KeyboardInputPublisher "1" *-- "many" Keyboard
    KeyboardInputPublisher "1" *-- "many" IKeyboardInputSubscriber
    KeyboardInputPublisher ..> Buffer: <<uses>>

  class InputVerifier {
    -processInputPublisher : ProcessInputPublisher
    -publishers: IPublisher[]
    +check() : void
  }
  InputVerifier ..> IPublisher: <<uses>>

  class Buffer {
    -concurentKeyboardEvents: Keyboard[]
    -concurrentMouseEvents: Mouse[]
    +add(event: Event): void
    +getKeyboardEvents(): List<Keyboard>
    +getKeyboardMouse(): List<Mouse>
  }
  Buffer "1" o-- "0..*" Mouse
  Buffer "1" o-- "0..*" Keyboard
  Buffer ..> Event: <<uses>>

}
@enduml

