@startuml
package "Process Input Handler" {
!startsub INTERFACE
  interface IProcessInputSubscriber {
    +notify(event : EventType) : void
  }

  class EventType {
    name : String
  }

  class ProcessInputPublisher {
    -subscribers : <EventType, IProcessInputSubscriber[]>

    +subscribe(event : EventType, subscriber : IProcessInputSubscriber) : void
    ~getEvents() : List<EventType>
  }
  ProcessInputPublisher "1" o-- "*" EventType
  ProcessInputPublisher "1" o-- "*" IProcessInputSubscriber : notifies subscriptor
!endsub

  class InputVerifier {
    -processInputPublisher : ProcessInputPublisher
    -eventBuffers: AEventBuffer[]

    +check() : void
  }
  InputVerifier ..> ProcessInputPublisher: <<uses>>
  InputVerifier ..> AEventBuffer: <<uses>>

  abstract class AEventBuffer {
      -buffer: Queue
      ~consume(): EventType[]
      +feed(events: EventType[]): void
  }
  note right of AEventBuffer::buffer
    a shared resource between threads
  end note
  AEventBuffer <|-- KeyboardBuffer
  AEventBuffer <|-- MouseBuffer
}
@enduml

