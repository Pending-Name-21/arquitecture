@startuml
package "Backend" {

    package "Publisher" {
        class Notifier{
            +instrucctions[Scanner scanner]
            +subscribe(Scanner scanner)
            +unsubcribe(Scanner scanner)
            +notifySubs()
        }

        interface Scanner{
            + EventListener()
        }

        Notifier --> Scanner
    }

    package "Input Handler" {
        class Mouse {
            + registerMouseEvents()
        }
        class Keyboard {
            + registerKeyboardEvents()
        }

        class Input_KeyboardScanner{
            +Keyboard keyboard
            +EventListener()
        }

        class Input_MouseScanner{
            +Mouse Mouse
            +EventListener()
        }

        Input_MouseScanner *-- Mouse
        Input_KeyboardScanner *-- Keyboard
        Publisher.Scanner <|.. Input_MouseScanner
        Publisher.Scanner <|.. Input_KeyboardScanner
    }

    package "Colisions Monitor"{
        class ColisionScanner{
            +Detector detector
            +EventListener()
            +collition()
        }

        class Detector{
            + List<Sprites> sprite
            + boolean collition()
        }

        class Sprites{
            + String path
            + List<Cords> cords
            + setImage()
        }

        class Cords{
            + cords x
            + cords y
        }

        ColisionScanner --> Detector 
        Publisher.Scanner <|.. ColisionScanner
        Sprites --> Cords
        Detector --> Sprites
    }

    package "Output Handler" {
        class Sound_Scanner{
            + Sound
            + EventListener()
        }
        class Sound {
            +playSound(Path path)
        }

        class Path {
            + String path
            + isValidPath()
        }
        Sound --> Path
        Sound_Scanner --> Sound
        Publisher.Scanner <|.. Sound_Scanner
    }

    Package "Game Loop"{
        class Event_Manager{
            +List<Request> requests
            +Execute()
        }

        interface Request{
            +Request()
        }

        class Manage_sound{
            +Sound sound
            +Request()
        }

        class Manage_detection{
            +Detector detector
            +Request()
        }

        class Manage_mouse{
            +Mouse mouse
            +Request()
        }

        class Manage_keyboard{
            +Keyboard keyboard
            +Request()
        }
        Request <|.. Manage_detection
        Request <|.. Manage_sound
        Request <|.. Manage_mouse
        Request <|.. Manage_keyboard
        Event_Manager --> Request
    }
}
@enduml


